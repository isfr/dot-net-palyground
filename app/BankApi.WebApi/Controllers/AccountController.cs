using System;
using System.Linq;
using System.Threading.Tasks;

using BankApi.Domain.Exceptions;
using BankApi.Service;
using BankApi.WebApi.Controllers;
using BankApi.WebApi.Filters;
using BankApi.WebApi.Mappers;
using BankApi.WebApi.Models;

using Microsoft.AspNetCore.Mvc;

using Swashbuckle.AspNetCore.Annotations;

namespace BankApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AccountController : BaseController
    {
        private readonly IAccountService accountService;
        public AccountController(IAccountService accountService)
        {
            this.accountService = accountService ?? throw new ArgumentNullException(nameof(accountService));
        }

        /// <summary>
        /// Gets the account information.
        /// </summary>
        /// <param name="id">The account identifier</param>
        /// <response code="200">OK. With the account information</response>
        /// <response code="400">Bad request. When there is a failure in the request format, expected headers, or the payload can't be unmarshalled.</response>
        /// <response code="404">Not Found. When there is no account with the given id.</response>
        [HttpGet]
        [Route("GetAccount/{id}")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccountDto), description: "This is the account information.")]
        [SwaggerResponse(statusCode: 400, type: typeof(BaseError), description: "Error generated by validations or bussines rules.")]
        [SwaggerResponse(statusCode: 404, description: "There was no account with that id.")]
        public async Task<IActionResult> GetAccount(int? id)
        {
            this.ValidateNullParameter(id, nameof(id));

            var accountInfo = await this.accountService.GetAccountInfo(id.Value);
            if (accountInfo is null)
            {
                return NotFound();
            }

            return Ok(accountInfo.ToDto());
        }

        /// <summary>
        /// Creates a new account to the given customer and with an initial amount.
        /// </summary>
        /// <param name="newAccount">The body from the request.</param>
        /// <response code="200">OK. With the new account id.</response>
        /// <response code="400">Bad request. When there is a failure in the request format, expected headers, or the payload can't be unmarshalled.</response>
        [HttpPost]
        [Route("CreateNewAccount")]
        [ValidateModelState]
        [SwaggerResponse(statusCode: 200, type: typeof(int), description: "The id of the new created account")]
        [SwaggerResponse(statusCode: 400, type: typeof(BaseError), description: "Error generated by validations or bussines rules.")]
        public async Task<IActionResult> CreateNewAccount([FromBody] NewAccountDto newAccount)
        {
            this.ValidateNullParameter(newAccount, nameof(newAccount));

            var newAccountId = await this.accountService.CreateNewAccount(newAccount.CustomerId, newAccount.Balance);

            return Ok(newAccountId);
        }

        /// <summary>
        /// Transfer an amount between 2 given accounts.
        /// </summary>
        /// <param name="transfer">The body from the request.</param>
        /// <response code="202">Accepted. When the transfer is done.</response>
        /// <response code="400">Bad request. When there is a failure in the request format, expected headers, or the payload can't be unmarshalled.</response>
        [HttpPost]
        [Route("Transfer")]
        [ValidateModelState]
        [SwaggerResponse(statusCode: 202, description: "Transfer done successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(BaseError), description: "Error generated by validations or bussines rules.")]
        public async Task<IActionResult> Transfer([FromBody] TransferDto transfer)
        {
            this.ValidateNullParameter(transfer, nameof(transfer));

            await this.accountService.TransferAmount(transfer.OriginAccountId, transfer.DestinationAccountId, transfer.Amount);

            return Accepted();
        }

        /// <summary>
        /// Retrieves the transaction history of a given account.
        /// </summary>
        /// <param name="accountId">The id of the account.</param>
        /// <response code="200">OK. With the transactions history.</response>
        /// <response code="400">Bad request. When there is a failure in the request format, expected headers, or the payload can't be unmarshalled.</response>
        /// <response code="404">Not Found. When there is no transactions history with the given id.</response>
        [HttpGet]
        [Route("GetTransactionHistory/{accountId}")]
        [SwaggerResponse(statusCode: 200, type: typeof(TransactionDto), description: "The list of transactions for the given account")]
        [SwaggerResponse(statusCode: 400, type: typeof(BaseError), description: "Error generated by validations or bussines rules.")]
        [SwaggerResponse(statusCode: 404, description: "There are no transactions for the given account")]
        public async Task<IActionResult> GetTransactionHistory(int? accountId)
        {
            this.ValidateNullParameter(accountId, nameof(accountId));

            var transactionHistory = await this.accountService.GetAccountTransferHistory(accountId.Value);
            if (!transactionHistory.Any())
            {
                return NotFound();
            }

            return Ok(transactionHistory.Select(trx => trx.ToDto()));
        }
    }
}
